generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String
  name          String
  bio           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  skills     Skill[]
  userSkills UserSkills[]
  projects   Project[]
  votes      Vote[]
  bookmarks  Bookmark[]
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String @unique

  users      User[]
  userSkills UserSkills[]
}

model UserSkills {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  skill   Skill @relation(fields: [skillId], references: [id])
  skillId Int

  @@id([userId, skillId])
}

model Project {
  id        Int      @id @default(autoincrement())
  repo_url  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author      User?         @relation(fields: [submittedBy], references: [id])
  submittedBy Int?
  tags        Tag[]
  projectTags ProjectTags[]
  votes       Vote[]
  bookmarks   Bookmark[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects    Project[]
  projectTags ProjectTags[]
}

model ProjectTags {
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int

  @@id([projectId, tagId])
}

model Vote {
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@id([userId, projectId])
}

model Bookmark {
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@id([userId, projectId])
}
